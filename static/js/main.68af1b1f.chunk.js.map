{"version":3,"sources":["components/ShowData.js","App.js","serviceWorker.js","index.js"],"names":["ShowData","props","state","chartData","style","position","textAlign","top","fontFamily","color","className","width","marginLeft","marginRight","id","backgroundColor","aria-hidden","type","placeholder","aria-label","height","data","this","options","title","display","displayTitle","text","fontSize","legend","displayLegend","legendPosition","Component","defaultProps","App","getChartData","setState","labels","datasets","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAIqBA,E,kDACpB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACVC,UAAUF,EAAME,WAJJ,E,qDAgBZ,OACI,6BAEI,wBAAIC,MAAO,CAACC,SAAS,WAAWC,UAAU,SAAUC,IAAI,OAAQC,WAAW,UAAUC,MAAO,UAA5F,qBACA,yBAAKC,UAAU,0CAA0CN,MAAO,CAACC,SAAS,WAAWE,IAAI,OAAQI,MAAM,QAASC,WAAW,OAAQC,YAAY,SACvI,0BAAMH,UAAU,kCAAkCI,GAAG,cAAcV,MAAO,CAAEW,gBAAiB,YAAa,uBAAGL,UAAU,2BACnHM,cAAY,UACpB,2BAAON,UAAU,yBAAyBO,KAAK,OAAOC,YAAY,eAAeC,aAAW,YAEjG,yBAAKf,MAAO,CAACC,SAAS,WAAWM,MAAM,QAAQS,OAAO,QAASR,WAAW,OAAQC,YAAY,OAAON,IAAI,OAAQQ,gBAAgB,UAEjI,kBAAC,OAAD,CACLM,KAAMC,KAAKpB,MAAMC,UACjBoB,QAAS,CACPC,MAAM,CACJC,QAAQH,KAAKrB,MAAMyB,aAEnBC,KAAK,mBACLC,SAAS,IAEXC,OAAO,CACLJ,QAAQH,KAAKrB,MAAM6B,cACnBzB,SAASiB,KAAKrB,MAAM8B,yB,GAvCIC,aAAjBhC,EAQbiC,aAAe,CACnBP,cAAa,EACbI,eAAe,EACfC,eAAe,S,ICVEG,E,kDACnB,aAAc,IAAD,8BACX,gBACKhC,MAAQ,CACXC,UAAU,IAHD,E,iEAQXmB,KAAKa,iB,qCAKLb,KAAKc,SAAS,CACZjC,UAAU,CACRkC,OAAQ,CAAC,aAAc,aAAc,aAAc,aAAc,aAAc,cAC/EC,SAAS,CACP,CACEC,MAAM,QACNlB,KAAK,CACH,MACA,MACA,OACA,MACA,MACA,OAEFN,gBAAgB,CACd,0BACA,0BACA,0BACA,0BACA,2BACA,0BACA,kC,+BAQV,OACE,6BACO,kBAAC,EAAD,CAAUZ,UAAWmB,KAAKpB,MAAMC,UAAY4B,eAAe,gB,GA7CvCC,aCObQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.68af1b1f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n import {Line} from 'react-chartjs-2'\r\n\r\n\r\nexport default class ShowData extends Component {\r\n constructor(props) {\r\n     super(props)\r\n \r\n     this.state = {\r\n        chartData:props.chartData\r\n     }\r\n }\r\n static defaultProps = {\r\n    displayTitle:true,\r\n    displayLegend: true,\r\n    legendPosition:'right',\r\n  }\r\n \r\n  \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* The title of web */}\r\n                <h1 style={{position:\"relative\",textAlign:\"center\", top:\"30px\", fontFamily:\"fantasy\",color: \"wheat\"}}>Stock Information</h1>\r\n                <div className=\"input-group md-form form-sm form-1 pl-0\" style={{position:\"relative\",top:\"50px\", width:\"300px\", marginLeft:\"auto\", marginRight:\"auto\" }}>\r\n                        <span className=\"input-group-text cyan lighten-2\" id=\"basic-text1\" style={{ backgroundColor: \"#15A4EC\" }}><i className=\"fas fa-search text-white\"\r\n                            aria-hidden=\"true\"></i></span>\r\n                    <input className=\"form-control my-0 py-1\" type=\"text\" placeholder=\"Search stock\" aria-label=\"Search\" />\r\n                </div>\r\n               <div style={{position:\"relative\",width:\"800px\",height:\"500px\", marginLeft:\"auto\", marginRight:\"auto\",top:\"80px\" ,backgroundColor:\"white\"}}>\r\n              {/* Display data in graph */}\r\n               <Line\r\n          data={this.state.chartData}\r\n          options={{\r\n            title:{\r\n              display:this.props.displayTitle,\r\n            // Name of company- the data displayed belongs her\r\n              text:'SBUX - Starbucks',\r\n              fontSize:25\r\n            },\r\n            legend:{\r\n              display:this.props.displayLegend,\r\n              position:this.props.legendPosition\r\n            }\r\n          }}\r\n        />\r\n               </div>\r\n                    \r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport ShowData from './components/ShowData.js';\n\nexport default class App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      chartData:{}\n    }\n  }\n\n  componentWillMount(){\n    this.getChartData();\n  }\n\n  // The function sets data of company \n  getChartData(){\n    this.setState({\n      chartData:{\n        labels: ['31-05-2018', '04-10-2018', '06-02-2019', '05-09-2019', '02-04-2020', '25-06-2020'],\n        datasets:[\n          {\n            label:'Price',\n            data:[\n              57.48,\n              55.47,\n              68.035,\n              96.11,\n              63.62,\n              73.64\n            ],\n            backgroundColor:[\n              'rgba(255, 99, 132, 0.6)',\n              'rgba(54, 162, 235, 0.6)',\n              'rgba(255, 206, 86, 0.6)',\n              'rgba(75, 192, 192, 0.6)',\n              'rgba(153, 102, 255, 0.6)',\n              'rgba(255, 159, 64, 0.6)',\n              'rgba(255, 99, 132, 0.6)'\n            ]\n          }\n        ]\n      }\n    });\n  }\n  render() {\n    return (\n      <div>\n             <ShowData chartData={this.state.chartData}  legendPosition=\"bottom\"/>\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}